// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BulkInsertBenchmarkStagingParams struct {
	ID    int32
	Value pgtype.Text
}

const mergeAndTruncateBenchmarkStaging = `-- name: MergeAndTruncateBenchmarkStaging :exec
DO $$
BEGIN
  INSERT INTO benchmark_test (id, value)
    SELECT id, value
      FROM benchmark_staging
      ON CONFLICT DO NOTHING;

  TRUNCATE benchmark_staging;
END $$
`

func (q *Queries) MergeAndTruncateBenchmarkStaging(ctx context.Context) error {
	_, err := q.db.Exec(ctx, mergeAndTruncateBenchmarkStaging)
	return err
}

const upsertBenchmarkRow = `-- name: UpsertBenchmarkRow :exec
INSERT INTO benchmark_test (id, value)
VALUES ($1, $2)
ON CONFLICT (id) DO UPDATE
SET value = EXCLUDED.value
`

type UpsertBenchmarkRowParams struct {
	ID    int32
	Value pgtype.Text
}

func (q *Queries) UpsertBenchmarkRow(ctx context.Context, arg UpsertBenchmarkRowParams) error {
	_, err := q.db.Exec(ctx, upsertBenchmarkRow, arg.ID, arg.Value)
	return err
}
